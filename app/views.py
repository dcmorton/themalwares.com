from app import app
from pymongo import MongoClient
from flask import render_template, flash, redirect, url_for
from .forms import searchform

MONGO_IP = 'localhost'
MONGO_PORT = '27000'
MONGO_DB = 'malware'
MONGO_COLLECTION = 'samples'

client = MongoClient("mongodb://"+MONGO_IP+":"+MONGO_PORT)
collection = client[MONGO_DB][MONGO_COLLECTION]

@app.route('/')
@app.route('/index')
def index():
	uniq_samples = collection.count()
	uniq_samples = "{:,}".format(uniq_samples)
	return render_template("index.html", data=uniq_samples)

@app.route('/search', methods=['GET', 'POST'])
def search():
    form = searchform()
    if form.validate_on_submit():
    	if len(form.searchquery.data) == 32:
            if collection.find({'results.md5':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}).count() != 0:
                    return redirect(url_for('samples', query=form.searchquery.data))
            else:
                    flash("Sample not found")
                    return redirect('/results')
    	elif len(form.searchquery.data) == 40:
    		if collection.find({'results.sha1':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}).count() != 0:
                    return redirect(url_for('samples', query=form.searchquery.data))
                else:
                    flash("Sample not found")
                    return redirect('/results')
    	elif len(form.searchquery.data) == 64:
    		if collection.find({'results.sha256':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}).count() != 0:
                    return redirect(url_for('samples', query=form.searchquery.data))
                else:
                    flash("Sample not found")
                    return redirect('/results')
    	else:
    		item = list(collection.find({'$text':{'$search':form.searchquery.data}},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}).limit(20))
                if not item:
                    flash("No samples found")
                    return redirect('/results')
                else:
                    while item:
                        result = item.pop()
                        flash(result)
                        if not item:
                            return redirect('/results')
    return render_template('search.html', 
                           title='Search',
                           form=form)

@app.route('/results')
def results():
	return render_template('results.html', title='Results')

@app.route('/samples/<query>')
def samples(query):
    if len(query) == 32:
        sample = list(collection.find({'results.md5':query},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False}))
        detects = list(collection.find({'results.md5':query},{'_id': False, 'results.scans': True}))
        results={}
        for product in detects[0]['results']['scans']:
            if detects[0]['results']['scans'][product]['result'] != None:
                results[product] = detects[0]['results']['scans'][product]['result']
        return render_template("samples.html", data=sample, query=query, title='Sample Info', detects=results)
    elif len(query) == 40:
        sample = list(collection.find({'results.sha1':query},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False}))
        return render_template("samples.html", data=sample, query=query, title='Sample Info')
    elif len(query) == 64:
        sample = list(collection.find({'results.sha256':query},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False}))
        return render_template("samples.html", data=sample, query=query, title='Sample Info')

@app.route('/mu-1dc98c01-236d99ce-1020d606-9b85bb07')
def blitzio():
    return '42'
