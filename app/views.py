from app import app
from pymongo import MongoClient
from flask import render_template, flash, redirect
from .forms import searchform

MONGO_IP = 'mustang.thenullroute.net'
MONGO_PORT = '27017'
MONGO_DB = 'malware'
MONGO_COLLECTION = 'samples'

client = MongoClient("mongodb://"+MONGO_IP+":"+MONGO_PORT)
collection = client[MONGO_DB][MONGO_COLLECTION]

@app.route('/')
@app.route('/index')
def index():
	uniq_samples = collection.count()
	uniq_samples = "{:,}".format(uniq_samples)
	return render_template("index.html", data=uniq_samples)

@app.route('/search', methods=['GET', 'POST'])
def search():
    form = searchform()
    if form.validate_on_submit():
    	if len(form.searchquery.data) == 32:
    		for item in collection.find({'results.md5':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}):
    			flash(item)
    			return redirect('/results')
    	elif len(form.searchquery.data) == 40:
    		for item in collection.find({'results.sha1':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}):
    			flash(item)
    			return redirect('/results')
    	elif len(form.searchquery.data) == 64:
    		for item in collection.find({'results.sha256':form.searchquery.data},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}):
    			flash(item)
    			return redirect('/results')
    	else:
    		for item in collection.find({'$text':{'$search':form.searchquery.data}},{'_id': False, 'response_code': False, 'results.response_code': False, 'results.verbose_msg': False, 'results.scans': False}):
    			flash(item)
    			return redirect('/results')
    	flash("Sample not found")
    	return redirect('/results')
    return render_template('search.html', 
                           title='Search',
                           form=form)

@app.route('/results')
def results():
	return render_template('results.html', title='Results')